---
# yamllint disable rule:max-lines
- name: Provision / initialize dom0
  hosts: "{{ lookup('env', 'MOLECULE_GROUP') | default('localhost', true) }}"
  connection: local
  tasks:
    - name: Initializing dom0 if it has been over 4 hours since the last system update
      block:
        # Run the Qubes dom0 role to enable features / update
        - name: Update and configure dom0
          vars:
            dom0_features:
              - backgrounds
              - grub
              - new-menu
              - plymouth
              - split-gpg
              - sudo-prompt
              - sys-usb
              - tabby
              - tweaks
              - tor-updates
              - u2f
              - update
              - vscode
              - yubikey
          include_role:
            name: roles/misc/qubes

        # Cache time so this block can be skipped on subsequent runs
        - name: Ensure directory for custom Ansible facts exists
          become: true
          ansible.builtin.file:
            state: directory
            recurse: yes
            path: /etc/ansible/facts.d
        - name: Write time to file for determining whether or not this block should run (on subsequent runs)
          become: true
          copy:
            content: |
              dom0_provision_time={{ ansible_date_time.iso8601 }}
            dest: /etc/ansible/facts.d/qubes.fact
      when:
        - (ansible_local.qubes is not defined) or
          ((((ansible_date_time.iso8601 - ansible_local.qubes.dom0_provision_time).total_seconds() / (3600 * 4)) | int) > 0)

- name: Make MAC addresses random (randomized every reboot)
  hosts: debian-11-dvm
  connection: qubes
  tasks:
    # Source: https://github.com/Qubes-Community/Contents/blob/master/docs/privacy/anonymizing-your-mac-address.md
    - name: Add MAC address randomization configuration
      copy:
        content: |
          [device]
          wifi.scan-rand-mac-address=yes

          [connection]
          wifi.cloned-mac-address=stable
          ethernet.cloned-mac-address=stable
          connection.stable-id=${CONNECTION}/${BOOT}
          # Use random IPv6 addresses per session / don't leak MAC via IPv6 (cf. RFC 4941)
          ipv6.ip6-privacy=2
        dest: /etc/NetworkManager/conf.d/00-randomize.conf
    - name: Configure NetworkManager to use dhclient (to prevent hostname leaks)
      copy:
        content: |
          [main]
          dhcp=dhclient
        dest: /etc/NetworkManager/conf.d/dhclient.conf
    - name: Determine if /etc/dhcp/dhclient.conf is sending host-name
      command: grep 'send host-name' < /etc/dhcp/dhclient.conf
      changed_when: false
      register: dhclient_host_name_grep
    - name: Remove "send host-name" from /etc/dhcp/dhclient.conf
      command: sed -i '/send host-name/d' /etc/dhcp/dhclient.conf
      when: dhclient_host_name_grep.rc == 0

- name: Ensure VM-lockdown scripts are added to Debian and Fedora templates
  hosts: debian-11:debian-11-dvm:fedora-36
  connection: qubes
  tasks:
    - name: Clone the VM-lockdown repository
      become: true
      ansible.builtin.git:
        repo: https://github.com/tasket/Qubes-VM-hardening.git
        dest: /usr/local/src/hardening
    - name: Run the installer
      become: true
      command: |
        bash install
        bash configure-sudo-prompt --force
      args:
        chdir: /usr/local/src/hardening
        creates: /lib/systemd/system/vm-boot-protect.service

- name: Ensure additional Debian/Whonix TemplateVM packages are installed to non-minimal templates
  hosts: debian-11:whonix-ws-16
  connection: qubes
  tasks:
    - name: Ensure qubes-gpg-split and qubes-u2f are installed
      become: true
      ansible.builtin.apt:
        name:
          - qubes-gpg-split
          - qubes-u2f
        state: latest
        update_cache: yes

- name: Ensure additional Fedora TemplateVM packages are installed to non-minimal templates
  hosts: fedora-36
  connection: qubes
  tasks:
    - name: Ensure qubes-gpg-split and qubes-u2f are installed
      become: true
      ansible.builtin.dnf:
        name:
          - qubes-gpg-split
          - qubes-u2f
        state: latest

- name: Configure all Qubes to forward local traffic on certain ports to OPNSense (if installed)
  hosts: debian-11
  connection: qubes
  vars:
    systemd_services:
      - name: opnsense-http-service
        port: 80
      - name: opnsense-https-service
        port: 443
  tasks:
    - name: "Create {{ service.name }}.socket systemd file"
      copy:
        content: |
          [Unit]
          Description={{ service.name }}

          [Socket]
          ListenStream=127.0.0.1:{{ service.port }}
          Accept=true

          [Install]
          WantedBy=sockets.target
        dest: "/lib/systemd/system/{{ service.name }}.socket"
      loop: "{{ systemd_services }}"
      loop_control:
        loop_var: service
      when: "'OPNSense' in (qubes_vms | map(attribute='name') | list)"
    - name: "Create {{ service.name }}@.service systemd file"
      copy:
        content: |
          [Unit]
          Description={{ service.name }}

          [Service]
          ExecStart=qrexec-client-vm '' qubes.ConnectTCP+{{ service.port }}
          StandardInput=socket
          StandardOutput=inherit
        dest: /lib/systemd/system/{{ service.name }}@.service
      loop: "{{ systemd_services }}"
      loop_control:
        loop_var: service
      when: "'OPNSense' in (qubes_vms | map(attribute='name') | list)"

- name: Provisioning TemplateVMs, configuring OPNSense PCI devices, and attaching USB with VirtualBox files for Packer HVMs
  hosts: "{{ lookup('env', 'MOLECULE_GROUP') | default('localhost', true) }}"
  connection: local
  tasks:
    # Set up TemplateVMs
    - name: Ensure TemplateVMs are initialized
      qubesos:
        guest: '{{ vm.name | lower }}{%if (vm.dvm == true) %}-dvm{% endif %}'
        state: create
        vmtype: TemplateVM
        properties:
          autostart: false
          default_dispvm: "{%if ((vm.virt_mode == 'hvm') and (vm.default_dispvm is not defined)) %}{{ omit }}{% else %}{{ vm.default_dispvm | default('debian-11-dvm') }}{% endif %}"
          features: '{{ vm.features | default(omit) }}'
          include_in_backups: '{{ vm.include_in_backups | default(true) }}'
          kernel: "{% if (vm.virt_mode == 'hvm') %}''{% else %}{{ omit }}{% endif %}"
          label: "{{ vm.color | default('black') }}"
          memory: "{{ vm.memory | default('2048') }}"
          maxmem: "{{ vm.maxmem | default('4096') }}"
          netvm: "{{ vm.netvm | default('sys-firewall') }}"
          provides_network: '{{ vm.provides_network | default(false) }}'
          template_for_dispvms: '{{ vm.dvm == true }}'
          vcpus: '{{ vm.vcpus | default(2) }}'
          virt_mode: '{{ vm.virt_mode | default(omit) }}'
          volume:
            name: root
            size: "{{ vm.volume.root | default('20g') }}"
      loop: '{{ qubes_vms }}'
      loop_control:
        label: '{{ vm.name }}'
        loop_var: vm

    - name: Ensure VMs not included in the qubes_vms list have the hardened-VM service enabled
      include_tasks: qubes/harden-vm.yml
      loop:
        - sys-net
        - sys-usb
      loop_control:
        loop_var: vm

    - name: Configure the OPNSense HVM's attached PCI devices to match sys-net's
      include_tasks: qubes/opnsense-pci.yml
      when: "'OPNSense' in (qubes_vms | map(attribute='name') | list)"

    - name: Bind all VMs localhost port 80 and 443 to OPNSense
      copy:
        content: |
          $anyvm @default allow,target=OPNSense
        dest: /etc/qubes-rpc/policy/qubes.ConnectTCP
      when: "'OPNSense' in (qubes_vms | map(attribute='name') | list)"

    # Builds fully-loaded Archlinux, Debian, Fedora, Ubuntu, macOS, and Windows HVM desktop environments from
    # images stored on USB. The `qubes_ventoy_usb_description` variable must be defined and match the USB
    # drive's label. See [JumpUSB](https://jumpusb.com) for additional information.
    - name: Configure USB that contains Packer / HVM desktop images
      include_tasks: qubes/packer-usb.yml
      when: qubes_ventoy_usb_description is defined

    - name: Create LVM volumes for Packer-built desktop HVMs
      include_tasks: qubes/packer-hvm.yml
      loop: '{{ qubes_vagrant_vms }}'
      loop_control:
        label: '{{ vm.name }}'
        loop_var: vm
      when: qubes_ventoy_usb_description is defined

- name: Configure systems with common settings and applications
  connection: qubes
  hosts: anonymous-dvm:crypto:development:gpg:media:personal:provision:remote:swarm:vault:vpn-dvm:web-dvm:work
  strategy: free
  tasks:
    - name: Provision the TemplateVM
      include_role:
        name: "{{ role }}"
      loop: "{{ qubes_roles[inventory_hostname] }}"
      loop_control:
        label: '{{ inventory_hostname }}'
        loop_var: role

- name: Configure persistent Docker files in select VMs
  hosts: development:swarm
  connection: qubes
  strategy: free
  tasks:
    - name: Ensure directory for custom Ansible facts exists
      become: true
      ansible.builtin.file:
        state: directory
        recurse: yes
        path: /rw/config/qubes-bind-dirs.d
    - name: Ensure Docker files are persistent
      copy:
        content: |
          binds+=( '/var/lib/docker' )
          binds+=( '/etc/docker' )
        dest: /rw/config/qubes-bind-dirs.d/50-docker.conf

- name: Finish configuring dom0
  connection: local
  hosts: "{{ lookup('env', 'MOLECULE_GROUP') | default('localhost', true) }}"
  tasks:
    # Initialize all the template-based AppVMs
    - name: Ensure AppVMs/DisposableVMs are initialized
      qubesos:
        guest: '{{ vm.name }}{%if (vm.dvm == true) %}-dvm{% endif %}'
        state: create
        vmtype: "{% if ((vm.type is not defined) and (vm.virt_mode == 'hvm')) %}AppVM{% else %}{{ vm.type | default('AppVM') }}{% endif %}"
        properties:
          autostart: '{{ vm.autostart | default(false) }}'
          default_dispvm: "{{ vm.default_dispvm | default('debian-11-dvm') }}"
          features: '{{ vm.features | default(omit) }}'
          include_in_backups: '{{ vm.include_in_backups | default(true) }}'
          kernel: "{% if (vm.virt_mode == 'hvm') %}{% else %}{{ omit }}{% endif %}"
          label: "{{ vm.color | default('black') }}"
          memory: "{{ vm.memory | default('2048') }}"
          maxmem: "{{ vm.maxmem | default('4096') }}"
          netvm: "{{ vm.netvm | default('sys-firewall') }}"
          provides_network: '{{ vm.provides_network | default(false) }}'
          template: '{{ vm.name | lower }}'
          template_for_dispvms: false
          vcpus: '{{ vm.vcpus | default(2) }}'
          virt_mode: '{{ vm.virt_mode | default(omit) }}'
          volume:
            name: private
            size: "{{ vm.volume.private | default('5g') }}"
      loop: '{{ qubes_vms }}'
      loop_control:
        label: '{{ vm.name }}'
        loop_var: vm
