---
# yamllint disable rule:max-lines
- name: Provision / initialize dom0
  hosts: dom0:!dom0
  tasks:
    # Prepare dom0
    # NOTE: The Qubes dom0 provisioning has some "become" sourcery involved because the default
    # user is root instead of the dom0 user
    - name: Check if dom0 was provisioned
      stat:
        path: /tmp/.setup-dom0-partially-provisioned
      register: dom0_partially_provisioned
    - name: Update and configure dom0
      vars:
        dom0_features:
          - dotfiles
          - grub
          - mirage
          - new-menu
          # - opnsense
          - plymouth
          - policy
          - screenshot
          - split-gpg
          - sudo-prompt
          - sys-gui
          - sys-usb
          - theme
          - u2f
          - update
          - yubikey
      include_role:
        name: professormanhattan.qubes
      when: not dom0_partially_provisioned.stat.exists
    - name: Register "partially provisioned" indicator temporary file
      copy:
        content: |
          done
        dest: /tmp/.setup-dom0-partially-provisioned
      when: not dom0_partially_provisioned.stat.exists
    - name: Ensure primary-templates-full TemplateVMs are configured to use sys-firewall as their NetVM
      vars:
        netvm: sys-firewall
      include_tasks: tasks/qubes/qvm-netvm.yml
      loop: "{{ groups['primary-templates-full'] }}"
    - name: Check if debian-11-backup was created
      command: qvm-check debian-11-backup
      register: qvm_debian_check
    - name: Clone a backup of debian-11
      command: qvm-clone debian-11 debian-11-backup
      when: qvm_debian_check.rc != 0

- name: Ensure upstream templates are upgraded
  # hosts: primary-templates-full:!debian-11-backup
  hosts: none
  tasks:
    - name: Determine if RPM Fusion was already enabled
      become: true
      stat:
        path: /root/.setup-rpm-fusion-enabled
      register: template_rpm_fusion
      when: ansible_os_family == 'RedHat'
    - name: Ensure RPM Fusion package repositories are enabled on RedHat-flavored systems
      become: true
      shell:
        cmd: |
          dnf config-manager --set-enabled rpmfusion-free
          dnf config-manager --set-enabled rpmfusion-free-updates
          dnf config-manager --set-enabled rpmfusion-nonfree
          dnf config-manager --set-enabled rpmfusion-nonfree-updates
      when:
        - ansible_os_family == 'RedHat'
        - not template_rpm_fusion.stat.exists
    - name: Register RPM Fusion enabled indicator
      become: true
      copy:
        content: |
          done
        dest: /root/.setup-rpm-fusion-enabled
      when:
        - ansible_os_family == 'RedHat'
        - not template_rpm_fusion.stat.exists
    - name: Ensure Debian systems are updated
      become: true
      apt:
        cache_valid_time: 3600
        force_apt_get: true
        update_cache: true
        upgrade: dist
      when: ansible_os_family == 'Debian'
    - name: Ensure RedHat systems are updated
      become: true
      dnf:
        name: '*'
        state: latest
        update_cache: true
      when: ansible_os_family == 'RedHat'
    - name: Ensure Archlinux systems are updated
      become: true
      community.general.pacman:
        update_cache: true
        upgrade: true
      when: ansible_os_family == 'Archlinux'
    - name: Install common software packages
      become: true
      ansible.builtin.package:
        name: "{{ common_software_packages }}"
        state: latest
    - name: Apply full theme and dotfiles
      include_role:
        name: professormanhattan.theme
    - name: Apply just the dotfiles
      include_role:
        name: professormanhattan.dotfiles

- name: Create the VM structure now that the templates are updated
  hosts: dom0
  tasks:
    - name: Ensure primary full TemplateVMs are disconnected from NetVMs
      vars:
        netvm: None
      include_tasks: tasks/qubes/qvm-netvm.yml
      loop: "{{ groups['primary-templates-full'] }}"
    - name: Check whether the structure was recently provisioned
      stat:
        path: /tmp/.setup-dom0-fully-provisioned
      register: dom0_fully_provisioned
    - name: Ensure all VMs except sys-net, sys-firewall, sys-whonix, and provision are shutdown
      command: qvm-shutdown --all --exclude=dom0 --exclude=sys-net --exclude=sys-firewall --exclude=sys-whonix --exclude=sys-usb --exclude=sys-gui --exclude=sys-gui-gpu --exclude=sys-gui-vnc --exclude=provision
    - name: Scaffold out the VM structure using Salt (now that all the TemplateVMs are updated)
      vars:
        dom0_features:
          - create-vms
      include_role:
        name: professormanhattan.qubes
      when: not dom0_fully_provisioned.stat.exists
    - name: Register "fully provisioned" indicator temporary file
      copy:
        content: |
          done
        dest: /tmp/.setup-dom0-fully-provisioned
      when: not dom0_fully_provisioned.stat.exists

- name: Ensure TemplateVMs use sys-firewall as their NetVM
  hosts: dom0
  tasks:
    - include_tasks: tasks/qubes/qvm-netvm.yml
      vars:
        netvm: sys-firewall
      loop: "{{ groups['template-vms'] }}"

- name: Provision the VPN TemplateVM for the other VPN TemplateVMs
  hosts: vpn-tmpl
  tasks:
    - include_tasks: tasks/qubes/vm-template.yml

- name: Shutdown the "vpn-tmpl"
  hosts: dom0
  tasks:
    - include_tasks: tasks/qubes/qvm-shutdown.yml
      loop:
        - vpn-tmpl

- name: Provision the VPN templates
  hosts: vpn-templates
  tasks:
    - include_tasks: tasks/qubes/vm-template.yml

- name: Shutdown the VPN TemplateVMs
  hosts: dom0
  tasks:
    - include_tasks: tasks/qubes/qvm-shutdown.yml
      loop: "{{ groups['vpn-templates'] }}"

- name: Provision the "standard-templates" TemplateVMs
  hosts: standard-templates
  tasks:
    - include_tasks: tasks/qubes/vm-template.yml

- name: Shutdown the "standard" TemplateVMs
  hosts: dom0
  tasks:
    - include_tasks: tasks/qubes/qvm-shutdown.yml
      loop: "{{ groups['standard-templates'] }}"

- name: Provision the desktop HVM TemplateVMs
  hosts: desktop-hvm-templates
  tasks:
    - include_tasks: tasks/qubes/hvm-template.yml

- name: Shutdown the desktop HVM TemplateVMs
  hosts: dom0
  tasks:
    - include_tasks: tasks/qubes/qvm-shutdown.yml
      vars:
        force_shutdown: true

- name: Disable TemplateVM's NetVMs and enable ProxyVM NetVMs
  hosts: dom0
  tasks:
    - name: Ensure the TemplateVMs in the "template-vms" group are disconnected from sys-firewall
      vars:
        netvm: None
      include_tasks: tasks/qubes/qvm-netvm.yml
      loop: "{{ groups['template-vms] }}"
    - name: Connect AppVMs, ProxyVMs, and StandaloneVMs to the sys-firewall NetVM
      vars:
        netvm: sys-firewall
      include_tasks: tasks/qubes/qvm-netvm.yml
      loop: "{{ groups['app-vms'] +  groups['proxy-vms'] + groups['standalone-vms'] }}"

- name: Provision the AppVMs, ProxyVMs, and StandaloneVMs with any non-templated changes
  hosts: app-vms:proxy-vms:standalone-vms
  tasks:
    - name: Provision the custom TemplateVMs
      include_role:
        name: '{{ role }}'
      loop: '{{ qubes_roles[inventory_hostname] | default([]) }}'
      loop_control:
        label: '{{ inventory_hostname }}'
        loop_var: role

- name: Finish provisioning dom0
  hosts: dom0
  tasks:
    - name: Set the NetVM for all VMs equal to their inventory-defined NetVM
      vars:
        connect_default_netvm: true
      include_tasks: tasks/qubes/qvm-netvm.yml
      loop: "{{ groups['qubes-vms'] }}"
    - name: Enable updates over Tor
      vars:
        dom0_features:
          - tor-updates
      include_role:
        name: professormanhattan.qubes
