---
# yamllint disable rule:max-lines
- name: Provision / initialize dom0
  hosts: "{{ lookup('env', 'MOLECULE_GROUP') | default('dom0', true) }}"
  connection: local
  tasks:
    - name: Ensure Ansible connections are configured to use bash
      become: true
      copy:
        content: |
          exec bash
        dest: /etc/qubes-rpc/qubes.VMShell
        mode: '0755'
    - name: Ensure dom0 and other VMs can be managed by Ansible
      become: true
      copy:
        content: |
          provision dom0 allow
          provision $anyvm allow
        dest: /etc/qubes-rpc/policy/qubes.VMShell
        mode: '0664'

    - name: Initializing dom0 if it has been over 4 hours since the last system update
      block:
        - name: Check for presence of /srv/user_salt
          become: true
          stat:
            path: /srv/user_salt
          register: srv_user_salt
        - name: Ensure /srv/user_salt is a directory
          become: true
          ansible.builtin.file:
            state: directory
            path: /srv/user_salt
        - name: Configure Qubes Salt formula and the top file
          become: true
          qubesformation:
            dest: /srv/user_salt/myprovisionedvms.sls
        - name: Enable Qubes Salt formula
          become: true
          shell:
            cmd: |
              qubesctl top.enabled | grep myprovisionedvms.top || { qubesctl top.enable myprovisionedvms && echo CHANGED || exit 1 ; }
          register: enableformation
          changed_when: "'CHANGED' in enableformation.stdout"
        - name: Realize Qubes formation
          become: true
          qubessls:
            sls: myprovisionedvms
            env: user

        # Run the Qubes dom0 role to enable features / update
        - name: Update and configure dom0
          vars:
            dom0_features:
              - dotfiles
              - grub
              - new-menu
              - plymouth
              - split-gpg
              - sudo-prompt
              # - sys-gui
              - sys-usb
              - tweaks
              # - tor-updates
              - u2f
              - update
              - yubikey
          include_role:
            name: professormanhattan.qubes

        # Cache time so this block can be skipped on subsequent runs
        - name: Ensure directory for custom Ansible facts exists
          become: true
          ansible.builtin.file:
            state: directory
            recurse: yes
            path: /etc/ansible/facts.d
        - name: Write time to file for determining whether or not this block should run (on subsequent runs)
          become: true
          copy:
            content: |
              dom0_provision_time={{ ansible_date_time.iso8601 }}
            dest: /etc/ansible/facts.d/qubes.fact
      when:
        - (ansible_local.qubes is not defined) or
          ((((ansible_date_time.iso8601 - ansible_local.qubes.dom0_provision_time).total_seconds() / (3600 * 4)) | int) > 0)

- name: Make MAC addresses random (randomized every reboot)
  hosts: network-disp
  connection: qubes
  tasks:
    # Source: https://github.com/Qubes-Community/Contents/blob/master/docs/privacy/anonymizing-your-mac-address.md
    # TODO: Same logic for OPNSense
    - name: Randomize MAC address and ensure no hostname leaks
      include_tasks: qubes/mac.yml

- name: Ensure VM-lockdown scripts are added to Debian and Fedora templates
  hosts: primarytemplates
  connection: qubes
  tasks:
    - name: Clone the VM-lockdown repository
      become: true
      ansible.builtin.git:
        repo: https://github.com/tasket/Qubes-VM-hardening.git
        dest: /usr/src/hardening
    - name: Run the installer
      become: true
      command: |
        bash install
        bash configure-sudo-prompt --force
      args:
        chdir: /usr/src/hardening
        creates: /lib/systemd/system/vm-boot-protect.service
    - name: Ensure qubes-gpg-split and qubes-u2f are installed
      become: true
      ansible.builtin.package:
        name:
          - qubes-gpg-split
          - qubes-u2f
        state: latest
    - name: Ensure all VMs have dotfiles
      include_role:
        name: professormanhattan.dotfiles
    # - name: Ensure all VMs have theme files / settings
    #   include_role:
    #     name: professormanhattan.theme

- name: Ensure the Fedora 36 XFCE4 TemplateVM gets injected with all the theme files
  hosts: fedora-36-xfce
  connection: qubes
  tasks:
    - name: Ensure VM is configured to be a GUI VM
      include_tasks: qubes/gui-vm.yml

- name: Configure all AppVM Qubes to forward local traffic on certain ports to OPNSense (if installed)
  hosts: appvms
  connection: qubes
  vars:
    systemd_services:
      - name: opnsense-http-service
        port: 80
      - name: opnsense-https-service
        port: 443
  tasks:
    - name: "Create {{ service.name }}.socket systemd file"
      become: true
      copy:
        content: |
          [Unit]
          Description={{ service.name }}

          [Socket]
          ListenStream=127.0.0.1:{{ service.port }}
          Accept=true

          [Install]
          WantedBy=sockets.target
        dest: "/lib/systemd/system/{{ service.name }}.socket"
      loop: "{{ systemd_services | default([]) }}"
      loop_control:
        loop_var: service
      when: "'OPNSense' in (qubes_vms | map(attribute='name') | list)"
    - name: "Create {{ service.name }}@.service systemd file"
      become: true
      copy:
        content: |
          [Unit]
          Description={{ service.name }}

          [Service]
          ExecStart=qrexec-client-vm '' qubes.ConnectTCP+{{ service.port }}
          StandardInput=socket
          StandardOutput=inherit
        dest: /lib/systemd/system/{{ service.name }}@.service
      loop: "{{ systemd_services | default([]) }}"
      loop_control:
        loop_var: service
      when: "'OPNSense' in (qubes_vms | map(attribute='name') | list)"

- name: Provisioning TemplateVMs, configuring OPNSense PCI devices, and attaching USB with VirtualBox files for Packer HVMs
  hosts: "{{ lookup('env', 'MOLECULE_GROUP') | default('dom0', true) }}"
  connection: local
  tasks:
#    - name: Ensure VMs not included in the qubes_vms list have the hardened-VM service enabled
#      include_tasks: qubes/harden-vm.yml
#      loop:
#        - sys-net
#        - sys-usb
#      loop_control:
#        loop_var: vm

    - name: Configure the OPNSense HVM's attached PCI devices to match sys-net's
      include_tasks: qubes/opnsense-pci.yml

    # TODO: Restrict from anyvm to appvms
    - name: Bind all VMs localhost port 80 and 443 to OPNSense
      become: true
      copy:
        content: |
          $anyvm @default allow,target=OPNSense
        dest: /etc/qubes-rpc/policy/qubes.ConnectTCP

    # Builds fully-loaded Archlinux, Debian, Fedora, Ubuntu, macOS, and Windows HVM desktop environments from
    # images stored on USB. The `qubes_ventoy_usb_description` variable must be defined and match the USB
    # drive's label. See [JumpUSB](https://jumpusb.com) for additional information.
    # - name: Configure USB that contains Packer / HVM desktop images
    #   include_tasks: qubes/packer-usb.yml
    #   when: qubes_ventoy_usb_description is defined
#
    # - name: Create LVM volumes for Packer-built desktop HVMs
    #   include_tasks: qubes/packer-hvm.yml
    #   loop: '{{ qubes_vagrant_vms | default([]) }}'
    #   loop_control:
    #     label: '{{ vm.name }}'
    #     loop_var: vm
    #   when: qubes_ventoy_usb_description is defined

- name: Configure the TemplateVMs
  hosts: templatevms
  strategy: free
  roles: []
    #- roles/system/dns
    #- roles/system/hosts
    #- roles/system/common
    # - roles/system/firewall
    #- roles/services/antivirus

- name: Configure systems with common settings and applications
  connection: qubes
  hosts: all
  strategy: free
  tasks:
    - name: Provision the TemplateVMs
      include_role:
        name: "{{ role }}"
      loop: "{{ qubes_roles[inventory_hostname] | default([]) }}"
      loop_control:
        label: '{{ inventory_hostname }}'
        loop_var: role

- name: Configure persistent Docker files in select VMs
  hosts: development:swarm
  connection: qubes
  strategy: free
  tasks:
    - name: Ensure directory for custom Ansible facts exists
      become: true
      ansible.builtin.file:
        state: directory
        recurse: yes
        path: /rw/config/qubes-bind-dirs.d
    - name: Ensure Docker files are persistent
      copy:
        content: |
          binds+=( '/var/lib/docker' )
          binds+=( '/etc/docker' )
        dest: /rw/config/qubes-bind-dirs.d/50-docker.conf
