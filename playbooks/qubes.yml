---
# yamllint disable rule:max-lines
- name: Provision / initialize dom0
  hosts: "{{ lookup('env', 'MOLECULE_GROUP') | default('localhost', true) }}"
  connection: local
  tasks:
    - name: Initializing dom0 if it has been over 4 hours since the last system update
      block:

        # Cache time so this block can be skipped on subsequent runs
        - name: Ensure directory for custom Ansible facts exists
          become: true
          ansible.builtin.file:
            state: directory
            recurse: yes
            path: /etc/ansible/facts.d
        - name: Write time to file for determining whether or not this block should run (on subsequent runs)
          become: true
          copy:
            content: |
              dom0_provision_time={{ ansible_date_time.iso8601 }}
            dest: /etc/ansible/facts.d/qubes.fact
      when:
        - (ansible_local.qubes is not defined) or
          ((((ansible_date_time.iso8601 - ansible_local.qubes.dom0_provision_time).total_seconds() / (3600 * 4)) | int) > 0)

- name: Ensure VM-lockdown scripts are added to Debian and Fedora templates
  hosts: debian-11:fedora-36
  connection: qubes
  tasks:
    - name: Clone the VM-lockdown repository
      become: true
      ansible.builtin.git:
        repo: https://github.com/tasket/Qubes-VM-hardening.git
        dest: /usr/local/src/hardening
    - name: Run the installer
      become: true
      command: |
        bash install
        bash configure-sudo-prompt --force
      args:
        chdir: /usr/local/src/hardening
        creates: /lib/systemd/system/vm-boot-protect.service

- name: Ensure additional Debian/Whonix TemplateVM packages are installed to non-minimal templates
  hosts: debian-11:whonix-ws-16
  connection: qubes
  tasks:
    - name: Ensure qubes-gpg-split and qubes-u2f are installed
      become: true
      ansible.builtin.apt:
        name:
          - qubes-gpg-split
          - qubes-u2f
        state: latest
        update_cache: yes

- name: Ensure additional Fedora TemplateVM packages are installed to non-minimal templates
  hosts: fedora-36
  connection: qubes
  tasks:
    - name: Ensure qubes-gpg-split and qubes-u2f are installed
      become: true
      ansible.builtin.dnf:
        name:
          - qubes-gpg-split
          - qubes-u2f
        state: latest

- name: Provisioning TemplateVMs, configuring OPNSense PCI devices, and attaching USB with VirtualBox files for Packer HVMs
  hosts: "{{ lookup('env', 'MOLECULE_GROUP') | default('localhost', true) }}"
  connection: local
  tasks:
    # Set up TemplateVMs
    - name: Ensure TemplateVMs are initialized
      qubesos:
        guest: '{{ vm.name | lower }}{%if (vm.dvm == true) %}-dvm{% endif %}'
        state: create
        vmtype: TemplateVM
        properties:
          autostart: false
          default_dispvm: "{%if ((vm.virt_mode == 'hvm') and (vm.default_dispvm is not defined)) %}{{ omit }}{% else %}{{ vm.default_dispvm | default('debian-11-dvm') }}{% endif %}"
          features: '{{ vm.features | default(omit) }}'
          include_in_backups: '{{ vm.include_in_backups | default(true) }}'
          kernel: "{% if (vm.virt_mode == 'hvm') %}''{% else %}{{ omit }}{% endif %}"
          label: "{{ vm.color | default('black') }}"
          memory: "{{ vm.memory | default('2048') }}"
          maxmem: "{{ vm.maxmem | default('4096') }}"
          netvm: "{{ vm.netvm | default('sys-firewall') }}"
          provides_network: '{{ vm.provides_network | default(false) }}'
          template_for_dispvms: '{{ vm.dvm == true }}'
          vcpus: '{{ vm.vcpus | default(2) }}'
          virt_mode: '{{ vm.virt_mode | default(omit) }}'
          volume:
            name: root
            size: "{{ vm.volume.root | default('20g') }}"
      loop: '{{ qubes_vms }}'
      loop_control:
        label: '{{ vm.name }}'
        loop_var: vm

    # Enable hardened VM service in sys-net and sys-usb
    - name: Check if sys-net has hardened-VM service enabled
      command: qvm-service -l sys-net | grep vm-boot-protect-root
      changed_when: false
      register: sys_net_protect_service
    - name: Ensure sys-net has hardened-VM service enabled
      command: qvm-service sys-net vm-boot-protect-root on
      when: sys_net_protect_service.rc == 1
    - name: Check if sys-usb has hardened-VM service enabled
      command: qvm-service -l sys-usb | grep vm-boot-protect-root
      changed_when: false
      register: sys_usb_protect_service
    - name: Ensure sys-usb has hardened-VM service enabled
      command: qvm-service sys-usb vm-boot-protect-root on
      when: sys_usb_protect_service.rc == 1

    # Attach sys-net PCI devices to opnsense-dvm
    - name: Determine number of PCI devices attached to opnsense-dvm
      command: qvm-device pci list opnsense | wc -l
      changed_when: false
      register: opnsense_pci_list
    - name: Determine number of PCI devices attached to sys-net
      command: qvm-device pci list sys-net | wc -l
      changed_when: false
      register: sys_net_pci_list
    - name: Attach network PCI devices to opnsense-dvm
      command: |
        while read DEVID; do
          qvm-device pci attach opnsense-dvm "$DEVID" --persistent
        done< <(qvm-device pci list sys-net | sed 's/^\([^ ]*\).*/\1/')
      when: opnsense_pci_list.stdout != sys_net_pci_list.stdout
    - name: Spin up disposable Qube to attach/transfer files from USB
      qubesos:
        guest: '{{ qubes_usb_transfer_vm }}'
        label: red
        state: running
        template: debian-11-minimal-dvm
    - name: Check if the USB storage device is already attached to the disposable USB Qube
      command: test -n "$(qvm-device usb list | grep "{{ qubes_ventoy_usb_description }}" | sed 's/^[^ ]*[ ]*[^ ]*[ ]*\([^ ]*\)$/\1/')"
      changed_when: false
      register: usb_device_test
    - name: Acquire the appropriate USB storage device ID
      command: qvm-device usb list | grep "{{ qubes_ventoy_usb_description }}" | sed 's/^\([^ ]*\) .*/\1/'
      changed_when: false
      register: devid_usb_list
      when: usb_device_test.rc == 1
    - name: Attach the USB storage device to the disposable USB Qube
      command: qvm-device usb attach {{ qubes_usb_transfer_vm }} "{{ devid_usb_list.stdout }}"
      changed_when: true
      when: usb_device_test.rc == 1
    - name: Create LVM volumes for Packer-built desktop HVMs
      include_tasks: packer-hvms.yml
      loop: '{{ qubes_vagrant_vms }}'
      loop_control:
        label: '{{ vm.name }}'
        loop_var: vm

- name: Configure systems with common settings and applications
  connection: qubes
  hosts: anonymous-dvm:crypto:development:gpg:media:personal:provision:remote:swarm:vault:vpn-dvm:web-dvm:work
  strategy: free
  tasks:
    - name: Provision the TemplateVM
      include_role:
        name: "{{ role }}"
      loop: "{{ qubes_roles[inventory_hostname] }}"
      loop_control:
        label: '{{ inventory_hostname }}'
        loop_var: role

- name: Configure persistent Docker files in select VMs
  hosts: development:swarm
  connection: qubes
  strategy: free
  tasks:
    - name: Ensure directory for custom Ansible facts exists
      become: true
      ansible.builtin.file:
        state: directory
        recurse: yes
        path: /rw/config/qubes-bind-dirs.d
    - name: Ensure Docker files are persistent
      copy:
        content: |
          binds+=( '/var/lib/docker' )
          binds+=( '/etc/docker' )
        dest: /rw/config/qubes-bind-dirs.d/50-docker.conf

- name: Finish configuring dom0
  connection: local
  hosts: "{{ lookup('env', 'MOLECULE_GROUP') | default('localhost', true) }}"
  tasks:
    # Initialize all the template-based AppVMs
    - name: Ensure AppVMs/DisposableVMs are initialized
      qubesos:
        guest: '{{ vm.name }}{%if (vm.dvm == true) %}-dvm{% endif %}'
        state: create
        vmtype: "{% if ((vm.type is not defined) and (vm.virt_mode == 'hvm')) %}AppVM{% else %}{{ vm.type | default('AppVM') }}{% endif %}"
        properties:
          autostart: '{{ vm.autostart | default(false) }}'
          default_dispvm: "{{ vm.default_dispvm | default('debian-11-dvm') }}"
          features: '{{ vm.features | default(omit) }}'
          include_in_backups: '{{ vm.include_in_backups | default(true) }}'
          kernel: "{% if (vm.virt_mode == 'hvm') %}{% else %}{{ omit }}{% endif %}"
          label: "{{ vm.color | default('black') }}"
          memory: "{{ vm.memory | default('2048') }}"
          maxmem: "{{ vm.maxmem | default('4096') }}"
          netvm: "{{ vm.netvm | default('sys-firewall') }}"
          provides_network: '{{ vm.provides_network | default(false) }}'
          template: '{{ vm.name | lower }}'
          template_for_dispvms: false
          vcpus: '{{ vm.vcpus | default(2) }}'
          virt_mode: '{{ vm.virt_mode | default(omit) }}'
          volume:
            name: private
            size: "{{ vm.volume.private | default('5g') }}"
      loop: '{{ qubes_vms }}'
      loop_control:
        label: '{{ vm.name }}'
        loop_var: vm
