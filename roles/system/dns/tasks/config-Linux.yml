---
- name: "Ensure {{ hostsfile_dest_dir }} exists"
  file:
    mode: 0755
    path: "{{ hostsfile_dest_dir }}"
    state: directory
  when: hostsfile_default_loopback

- name: Ensure hosts files are downloaded
  get_url:
    url: "{{ hostsfile.url }}"
    dest: "{{ hostsfile_dest_dir }}/{{ hostsfile.filename }}"
    mode: 0644
  loop: "{{ hostsfile_entries }}"
  loop_control:
    loop_var: hostsfile
  register: download_result
  when: hostsfile_default_loopback

- name: Ensure a copy of hosts files are created
  copy:
    src: "{{ hostsfile_dest_dir }}/{{ hostsfile.filename }}"
    dest: "{{ hostsfile_dest_dir }}/{{ hostsfile.filename }}-clean"
    mode: preserve
    remote_src: true
  loop: "{{ hostsfile_entries }}"
  loop_control:
    loop_var: hostsfile
  when:
    - "download_result.results | map(attribute='changed') | join(',') | regex_search('True')"
    - hostsfile_default_loopback

- name: Ensure the hosts file are sanitized
  lineinfile:
    path: "{{ hostsfile_dest_dir }}/{{ hostsfile.filename }}-clean"
    regex: '(^ *#.*$)|^$'
    state: absent
    mode: 0644
  loop: "{{ hostsfile_entries }}"
  loop_control:
    loop_var: hostsfile
  when:
    - "download_result.results | map(attribute='changed') | join(',') | regex_search('True')"
    - hostsfile_default_loopback

- name: Backup the default hosts file # noqa 301
  command: hostctl backup --path "{{ hostsfile_dest_dir }}/"
  when: hostsfile_default_loopback

# @action `hostctl` versions after v1.0.15 check for unique domains in a profile which makes
# it extremely slow to process large hosts files. Revisit after a future version provides a
# switch like that in version v1.0.3
# - name: Create hostctl profiles using the various hosts files
#   command: "hostctl add {{ hostsfile.filename }} --from {{ hostsfile_dest_dir }}/{{ hostsfile.filename }}-clean -q"
#   loop: "{{ hostsfile_entries }}"
#   loop_control:
#     loop_var: hostsfile

- name: Read the content of the hosts files # noqa 301
  command: cat "{{ hostsfile_dest_dir }}/{{ hostsfile.filename }}-clean"
  loop: "{{ hostsfile_entries }}"
  loop_control:
    loop_var: hostsfile
  register: clean_files
  when:
    - "download_result.results | map(attribute='changed') | join(',') | regex_search('True')"
    - hostsfile_default_loopback

- name: Determine whether or not a Desktop Environment is installed
  stat:
    path: "{{ item }}"
  with_items:
    - /usr/bin/gnome-session
    - /usr/bin/xfce4-session
    - /usr/bin/lxsession
    - /usr/bin/kded5
    - /usr/bin/icewm-session
    - /usr/bin/mate-session
    - /usr/bin/cinnamon
  register: session_files
  when: ansible_system == 'Linux'

- name: Set results of checking for Desktop Environment to a variable
  set_fact:
    desktop_env_results: "{{ session_files.results | map(attribute='stat.exists') }}"
  when: ansible_system == 'Linux'

- name: Setup SwitchHosts
  include_tasks: user-Linux.yml
  loop: "{{ user_configs }}"
  loop_control:
    label: "{{ user.username }}"
    loop_var: user
  when:
    - ansible_system == 'Darwin' or (ansible_system == 'Linux' and desktop_env_results | join(',') | regex_search('true'))
    - "download_result.results | map(attribute='changed') | join(',') | regex_search('True')"
    - (user.system is not defined) or ((user.system is defined) and (not user.system))
    - install_switchhosts

- name: Set systemd-resolved DNS
  lineinfile:
    path: "{{ systemd_resolved_conf_path }}"
    regex: "(^#DNS=|^DNS=)"
    line: "DNS={{ dns_provider }}"
  when:
    - dns_provider is defined
    - ansible_system == 'Linux'
  notify: restart systemd-resolved

- name: Set systemd-resolved FallbackDNS
  lineinfile:
    path: "{{ systemd_resolved_conf_path }}"
    regex: "(^#FallbackDNS=|^FallbackDNS=)"
    line: "FallbackDNS={{ dns_fallback_provider }}"
  when:
    - ansible_system == 'Linux'
    - dns_fallback_provider is defined
  notify: restart systemd-resolved

- name: Set systemd-resolved DNSOverTLS
  lineinfile:
    path: "{{ systemd_resolved_conf_path }}"
    regex: "(^#DNSOverTLS=|^DNSOverTLS=)"
    line: "DNSOverTLS={{ dns_over_tls }}"
  notify: restart systemd-resolved
  when:
    - dns_over_tls is defined
    - ansible_system == 'Linux'
