---
- name: Create group_vars/all directory on localhost if it does not exist
  file:
    path: group_vars/all
    recurse: true
    state: directory

- name: Check for presence of group_vars/all/randomized.vault.yml file
  stat:
    path: "{{ lookup('env','PWD') }}/group_vars/all/randomized.vault.yml"
  register: randomized_vault_file

- name: Create group_vars/all/randomized.vault.yml if it is not present
  copy:
    dest: "{{ lookup('env','PWD') }}/group_vars/all/randomized.vault.yml"
    content: |
      ---
      # IMPORTANT: This file is automatically generated. Changes could be over-written by Ansible!
  delegate_to: localhost
  when: not randomized_vault_file.stat.exists

- name: Check for presence of VAULT_PASSWORD file
  command: cat ~/.VAULT_PASSWORD
  failed_when: false
  changed_when: false
  register: vault_password_file

- name: Set fact for vault password
  set_fact:
    vault_password: "{{ vault_password_file.stdout }}"
  when: vault_password_file.rc == 0

- name: Ensure pexpect is installed
  ansible.builtin.pip:
    name: pexpect
  when:
    - vault_password is defined
    - vault_password_file.rc != 0

- name: Decrypt group_vars/all/randomized.vault.yml if it is already present
  expect:
    command: ansible-vault decrypt --ask-vault-pass {{ lookup('env','PWD') }}/group_vars/all/randomized.vault.yml
    responses:
      Vault password: "{{ vault_password }}"
  failed_when: false
  when:
    - randomized_vault_file.stat.exists
    - vault_password is defined

- name: "Generate randomized credential for {{ item.name }}"
  ansible.builtin.lineinfile:
    path: group_vars/all/randomized.vault.yml
    state: present
    regexp: "{{ item.name }}"
    line: |
      {{ item.name }}: {{ lookup('ansible.builtin.password', '/dev/null length=' + ((item.length | string) | default('14')) + ' chars=' + (item.chars | default('ascii_letters'))) }}
  loop: "{{ randomized_passwords | default([]) }}"
  when: item.name is not defined

- name: Add group_vars/all/randomized.vault.yml to the vault
  expect:
    command: ansible-vault encrypt --ask-vault-pass {{ lookup('env','PWD') }}/group_vars/all/randomized.vault.yml
    responses:
      New Vault password: "{{ vault_password }}"
      Confirm New Vault password: "{{ vault_password }}"
  when:
    - vault_password is defined
  delegate_to: localhost
