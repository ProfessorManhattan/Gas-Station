---
- name: 'Install the addon {{ addon.name }}'
  block:
    - name: 'Fetch the Addon page for {{ addon.name }}'
      become_user: "{{ user.username }}"
      uri:
        url: "{{ addon.link }}"
        return_content: true
      register: addon_page

    - name: 'Download the Addon file {{ addon.name }}'
      become_user: "{{ user.username }}"
      get_url:
        url: "{{ addon_page.content | regex_search('https:\\/\\/addons.mozilla.org\\/firefox\\/downloads\\/file\\/\\d*\\/[\\w\\-\\_\\.]*.xpi') }}"
        dest: "{{ ('~/.mozilla/extensions/' if ansible_system == 'Linux' else '~/Library/Application Support/Mozilla/Extensions/') + \
          '{ec8030f7-c20a-464f-9b0e-13a3a9e97384}/' + addon.name | lower + '.xpi' }}"

    - name: 'Create a temporary directory to extract the Addon {{ addon.name }}'
      become_user: "{{ user.username }}"
      file:
        path: "/tmp/{{ addon.name | lower }}"
        state: directory
        mode: 0755

    - name: 'Extract the Addon file {{ addon.name }}'
      become_user: "{{ user.username }}"
      unarchive:
        src: "{{ ('~/.mozilla/extensions/' if ansible_system == 'Linux' else '~/Library/Application Support/Mozilla/Extensions/') + \
          '{ec8030f7-c20a-464f-9b0e-13a3a9e97384}/' + addon.name | lower + '.xpi' }}"
        dest: "/tmp/{{ addon.name | lower }}"
        remote_src: true
      ignore_errors: true

    - name: Read the Addon manifest file # noqa 301
      become_user: "{{ user.username }}"
      command: cat "/tmp/{{ addon.name | lower }}/manifest.json"
      register: manifest
      ignore_errors: true

    - name: 'Find the ID of the Addon {{ addon.name }}'
      set_fact:
        addon_id: "{{ (manifest.stdout | from_json).browser_specific_settings.gecko.id | default((manifest.stdout | from_json).applications.gecko.id) }}"
      register: id_result
      ignore_errors: true

    - name: Rename the Addon file # noqa 301
      become_user: "{{ user.username }}"
      command: mv "{{ addon.name | lower }}.xpi" "{{ addon_id }}.xpi"
      args:
        chdir: "{{ ('~/.mozilla/extensions/' if ansible_system == 'Linux' else '~/Library/Application Support/Mozilla/Extensions/') + \
          '{ec8030f7-c20a-464f-9b0e-13a3a9e97384}/' }}"
      ignore_errors: true
  rescue:
    - name: User notification
      debug:
        msg: "The addon {{ addon.name }} does not have an ID and cannot be installed using the Playbook. Please install the addon using the browser"
      when: "'has no attribute \\'applications\\'' in id_result.msg"
  always:
    - name: Reset the ID
      set_fact:
        addon_id: ""
    - name: Delete the temporary directory where the Addon was extracted
      become_user: "{{ user.username }}"
      file:
        path: "/tmp/{{ addon.name | lower }}"
        state: absent
