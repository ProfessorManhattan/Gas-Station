---
- name: "Fetch the {{ app_name }}'s Downloads page to find the latest version"
  uri:
    url: "{{ protonvpn_fedora_page }}"
    return_content: true
  register: proton_page

- name: "Find {{ app_name }}'s package repository URL"
  set_fact:
    protonvpn_rpm_repository_url: "{{ proton_page.content | regex_search('https:.*\\.rpm') }}"

- name: "Ensure {{ app_name }}'s dnf Repository is setup"
  dnf:
    name: "{{ protonvpn_rpm_repository_url }}"
    state: present
    disable_gpg_check: true

- name: 'Ensure {{ app_name }} is installed'
  dnf:
    name: protonvpn
    state: present
    update_cache: "{{ omit if skip_package_cache_update is defined else 'true' }}"

- name: 'Ensure {{ app_name }} CLI is installed'
  dnf:
    name: protonvpn-cli
    state: present
    update_cache: "{{ omit if skip_package_cache_update is defined else 'true' }}"

- name: Install dependencies for alternate routing
  pip:
    name: dnspython>=1.16.0
    state: present
    extra_args: --user
  loop: "{{ user_configs }}"
  loop_control:
    label: "{{ user.username }}"
    loop_var: user
  when: (user.system is not defined) or ((user.system is defined) and (not user.system))

- name: Install System tray icon (TODO - Currently complains about missing gir1.2-appindicator3.0.1 which is an optional dependency of ProtonVPN)
  dnf:
    name:
      - gnome-extensions-app
      - gnome-shell-extension-appindicator
      - gnome-tweaks
      - libappindicator-gtk3
    state: present
  failed_when: false

- name: Ensure custom facts directory exists
  file:
    mode: 0755
    path: /etc/ansible/facts.d
    state: directory

- name: Fetch the release information of ProtonMail Import-Export App
  uri:
    url: "{{ import_export_releases_linux }}"
    return_content: true
  register: ie_releases

- name: Determine whether or not the latest version of ProtonMail Import-Export App is already installed
  set_fact:
    install_protonmailie: "{{ (ansible_local.protonmailie is not defined) or \
      ((ansible_local.protonmailie is defined) and \
      (ansible_local['protonmailie']['settings']['version'] != ie_releases.json.Version)) }}"

- name: Ensure ProtonMail Import-Export App is installed
  dnf:
    name: "{{ ie_releases.json.RpmFile }}"
    state: present
  when: install_protonmailie

- name: Save meta information about the version of ProtonMail Import-Export App that was installed
  community.general.ini_file:
    path: /etc/ansible/facts.d/protonmailie.fact
    mode: 0644
    section: settings
    option: version
    value: "{{ ie_releases.json.Version }}"
    no_extra_spaces: true
  when: install_protonmailie

- name: Fetch the ProtonMail Bridge's Downloads page to find the latest version
  uri:
    url: "{{ bridge_releases }}"
    return_content: true
  register: bridge_page

- name: Find ProtonMail Bridge's RPM package URL
  set_fact:
    protonmail_bridge_rpm: "{{ bridge_page.content | regex_search('https:\\/\\/protonmail.com\\/download\\/bridge\\/protonmail-bridge.*\\.rpm') }}"

- name: Determine whether or not the latest version of ProtonMail Bridge is already installed
  set_fact:
    install_protonmailbridge: "{{ (ansible_local.protonmailbridge is not defined) or \
      ((ansible_local.protonmailbridge is defined) and \
      (ansible_local['protonmailbridge']['settings']['version'] != protonmail_bridge_rpm | regex_search('(\\d\\.)*\\d*'))) }}"

- name: Ensure ProtonMail Bridge is installed
  dnf:
    name: "{{ protonmail_bridge_rpm }}"
    state: present
  when: install_protonmailbridge

- name: Save meta information about the version of ProtonMail Bridge that was installed
  community.general.ini_file:
    path: /etc/ansible/facts.d/protonmailbridge.fact
    mode: 0644
    section: settings
    option: version
    value: "{{ protonmail_bridge_rpm | regex_search('(\\d\\.)*\\d*') }}"
    no_extra_spaces: true
  when: install_protonmailbridge
