---
# @action Ensures software is installed
# Installs software on Windows Systems using `Choco`
- name: "Ensure {{ software_item }} is installed (Chocolatey)"
  chocolatey.chocolatey.win_chocolatey:
    name: "{{ software_package[software_item]['choco'] }}"
    state: present
  when: "'choco' in available_methods"
  register: choco_result
  failed_when: "choco_result.rc == 1 and 'The package was not found' not in choco_result.stdout"

# @action Ensures software is installed
# Installs software on Windows Systems using `Scoop`
- name: "Ensure {{ software_item }} is installed (Scoop)"
  community.windows.win_scoop:
    name: "{{ software_package[software_item]['scoop'] }}"
    state: present
    global: true
  when:
    - "'scoop' in available_methods"
    - "(choco_result.rc is defined and choco_result.rc != 0) or choco_result.skipped is defined"
  register: scoop_result
  failed_when: "scoop_result.stdout is defined and not ('installed successfully' in scoop_result.stdout or \
    'Couldn\\'t find manifest for' in scoop_result.stdout)"
  changed_when: "scoop_result.stdout is defined and 'installed successfully' in scoop_result.stdout"

- name: "Ensure {{ software_item }} is installed (go)"
  ansible.windows.win_shell: |
    {%- if software_package[software_item]['go'] | regex_search('go (?i)(install|build|get)') -%}
    {{ software_package[software_item]['go'] }}
    {%- else -%}
    go install {{ software_package[software_item]['go'] }}
    {%- endif -%}
  environment:
    GOPATH: "{{ 'C:/Users/' + ansible_user + '/.local/go' }}"
  register: go_result
  when:
    - "'go' in available_methods"
    - "(choco_result.rc is defined and choco_result.rc != 0) or choco_result.skipped is defined"
    - "scoop_result.stdout is defined and 'Couldn\\'t find manifest for' in scoop_result.stdout or scoop_result.skipped is defined"
  failed_when: false

- name: "Ensure {{ software_item }} is installed (cargo)"
  ansible.windows.win_shell: |
    {%- if 'cargo install' in "software_package[software_item]['cargo']" -%}
    {{ software_package[software_item]['cargo'] }}
    {%- else -%}
    cargo install {{ software_package[software_item]['cargo'] }}
    {%- endif -%}
  register: cargo_result
  when:
    - "'cargo' in available_methods"
    - "(choco_result.rc is defined and choco_result.rc != 0) or choco_result.skipped is defined"
    - "scoop_result.stdout is defined and 'Couldn\\'t find manifest for' in scoop_result.stdout or scoop_result.skipped is defined"
    - "(go_result.rc is defined and go_result.rc != 0) or go_result.skipped is defined"
  failed_when: false

- name: "Ensure {{ software_item }} is installed (Binary)"
  block:
    - name: "Ensure C:/Program Files/{{ software_item }} folder exists"
      ansible.windows.win_file:
        path: "C:/Program Files/{{ software_item }}"
        state: directory
    - name: "Ensure {{ software_item }} is installed (Binary)"
      ansible.windows.win_get_url:
        url: "{{ software_package[software_item]['exe'] }}"
        dest: "C:/Program Files/{{ software_item }}/{{ software_item }}.exe"
      register: binary_result
      failed_when: "binary_result.status_code != 200 and 'Request failed' not in binary_result.msg"
    - name: "Ensure {{ software_item }} is added to PATH"
      ansible.windows.win_path:
        elements:
          - "C:/Program Files/{{ software_item }}"
  when:
    - "'exe' in available_methods"
    - "(choco_result.rc is defined and choco_result.rc != 0) or choco_result.skipped is defined"
    - "scoop_result.stdout is defined and 'Couldn\\'t find manifest for' in scoop_result.stdout or scoop_result.skipped is defined"
    - "(go_result.rc is defined and go_result.rc != 0) or go_result.skipped is defined"
    - "(cargo_result.stderr is defined and (not ('is already installed' in cargo_result.stderr or 'Installed package' in cargo_result.stderr) or \
        'error: could not find' in cargo_result.stderr)) or cargo_result.skipped is defined"

- name: "Ensure {{ software_item }} is installed (GitHub)" # noqa 301
  ansible.windows.win_command: task install:gh:"{{ software_item }}"
  async: 120
  poll: 10
  retries: 3
  delay: 10
  until: github_install_result is not failed
  args:
    chdir: 'C:\ProgramData\MegabyteLabs\shared-master'
  register: github_install_result
  when:
    - "'github' in available_methods"
    - "(choco_result.rc is defined and choco_result.rc != 0) or choco_result.skipped is defined"
    - "scoop_result.stdout is defined and 'Couldn\\'t find manifest for' in scoop_result.stdout or scoop_result.skipped is defined"
    - "(go_result.rc is defined and go_result.rc != 0) or go_result.skipped is defined"
    - "(cargo_result.stderr is defined and (not ('is already installed' in cargo_result.stderr or 'Installed package' in cargo_result.stderr) or \
        'error: could not find' in cargo_result.stderr)) or cargo_result.skipped is defined"
  failed_when: "github_install_result is defined and (github_install_result.rc != 0 and not (github_install_result.rc == 1 and ('No tasks with description available' in github_install_result.stdout \
    or 'no assets match the file pattern' in github_install_result.stderr)))"
  changed_when: "github_install_result is defined and (github_install_result.rc == 1 and not (('No tasks with description available' in github_install_result.stdout \
    or 'no assets match the file pattern' in github_install_result.stderr)) or not ('is up to date' in github_install_result.stderr))"
