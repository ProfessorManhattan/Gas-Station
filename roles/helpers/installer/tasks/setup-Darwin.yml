---
# @action Ensures software is installed
# Installs software on MacOS Systems using `Homebrew`
- name: "Ensure {{ software_item }} is installed (Homebrew)"
  become: false
  community.general.homebrew:
    name: "{{ software_package[software_item]['brew'] }}"
    state: present
  when: "'brew' in available_methods"
  register: brew_result
  failed_when: not ("'No available formula or cask with the name' in brew_result.msg or 'already installed' in brew_result.msg \
    or 'No formulae found' in brew_result.msg or 'Package already installed' in brew_result.msg")

- name: "Ensure {{ software_item }} is installed (go)" # noqa 301 305
  become: false
  shell:
    cmd: |
      alias go="$(which -a go | grep 'usr/local/bin')"
      unset GOROOT
      go install {{ software_package[software_item]['go'] }}
  register: go_result
  args:
    executable: /bin/bash
  when:
    - "'go' in available_methods"
    - "brew_result.skipped or (brew_result.msg != '' and not ('Package installed' in brew_result.msg or 'already installed' in brew_result.msg))"
  failed_when: false

- name: "Ensure {{ software_item }} is installed (cargo)" # noqa 301 305
  become: false
  shell:
    cmd: |
      alias cargo="$(which -a cargo | grep 'usr/local/bin')"
      {%- if 'cargo install' in "software_package[software_item]['cargo']" -%}
      {{ software_package[software_item]['cargo'] }}
      {%- else -%}
      cargo install {{ software_package[software_item]['cargo'] }}
      {%- endif -%}
  register: cargo_result
  args:
    executable: /bin/bash
  when:
    - "'cargo' in available_methods"
    - brew_result.skipped is defined or (brew_result.msg != '' and not ('Package installed' in brew_result.msg or 'already installed' in brew_result.msg))
    - "(go_result.rc is defined and go_result.rc != 0) or go_result.skipped"
  failed_when: false

- name: "Ensure {{ software_item }} is installed (Binary)"
  get_url:
    url: "{{ software_package[software_item]['binary'] }}"
    dest: "/usr/local/bin/{{ software_item }}"
    mode: 0755
  when:
    - "'binary' in available_methods"
    - brew_result.skipped is defined or (brew_result.msg != '' and not ('Package installed' in brew_result.msg or 'already installed' in brew_result.msg))
    - "(go_result.rc is defined and go_result.rc != 0) or go_result.skipped is defined"
    - "'is already installed' not in cargo_result.stderr or 'Installed package' not in cargo_result.stderr or 'error: could not find' in cargo_result.stderr"
  register: binary_result
  failed_when: "binary_result.status_code != 200 and 'Request failed' not in binary_result.msg"

- name: "Ensure go-task/tap/go-task is installed (Homebrew)"
  become: false
  community.general.homebrew:
    name: go-task/tap/go-task
    state: present
  when:
    - "'github' in available_methods"
    - brew_result.skipped is defined or (brew_result.msg != '' and not ('Package installed' in brew_result.msg or 'already installed' in brew_result.msg))
    - "(go_result.rc is defined and go_result.rc != 0) or go_result.skipped is defined"
    - "(cargo_result.stderr is defined and (not ('is already installed' in cargo_result.stderr or 'Installed package' in cargo_result.stderr) or \
        'error: could not find' in cargo_result.stderr)) or cargo_result.skipped is defined"
    - "(binary_result.msg is defined and 'Request failed' in binary_result.msg) or binary_result.skipped is defined"

- name: "Ensure {{ software_item }} is installed (GitHub)" # noqa 301
  become: true
  become_user: "{{ ansible_user | default('env', 'USER') }}"
  shell: task install:gh:"{{ software_item }}"
  register: github_install_result
  async: 180
  poll: 5
  retries: 3
  delay: 10
  until: "github_install_result is not failed"
  ignore_errors: true
  args:
    executable: /bin/bash
    chdir: /tmp/shared-master
  when:
    - "'github' in available_methods"
    - brew_result.skipped is defined or (brew_result.msg != '' and not ('Package installed' in brew_result.msg or 'already installed' in brew_result.msg))
    - "(go_result.rc is defined and go_result.rc != 0) or go_result.skipped is defined"
    - "(cargo_result.stderr is defined and (not ('is already installed' in cargo_result.stderr or 'Installed package' in cargo_result.stderr) or \
        'error: could not find' in cargo_result.stderr)) or cargo_result.skipped is defined"
    - "(binary_result.msg is defined and 'Request failed' in binary_result.msg) or binary_result.skipped is defined"
  failed_when: github_install_result is defined and (github_install_result.rc != 0 and not (github_install_result.rc == 1 and 'No tasks with description available' in github_install_result.stdout))
