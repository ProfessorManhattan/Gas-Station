---
- name: Ensure Megabyte Labs configuration directory exists
  file:
    mode: 0700
    path: "{{ item }}"
    state: directory
  loop:
    - ~/.config
    - ~/.config/megabytelabs

- name: "Check if {{ app_name }} has configuration stored in /root/.config/megabytelabs/{{ app_name }}"
  stat:
    path: "~/.config/megabytelabs/{{ app_name }}"
  register: watchman_config

- name: "Detect previously installed {{ app_name }} version"
  command: cat watchman
  args:
    chdir: ~/.config/megabytelabs
  changed_when: false
  register: current_watchman_version
  when: watchman_config.stat.exists

- name: "Detect the latest {{ app_name }} version"
  uri:
    url: https://api.github.com/repos/facebook/watchman/releases
    headers:
      Authorization: "token github_pat_{{ github_public_access_token | default('11ABLI5FQ001Q0rkjpBoN4_CZ8a4MkVduK4MZsmLZ12Key9Lpuwd0ONOsz5FjSQ9hPFDJY45NEpq9zAij8') }}"
  register: watchman_releases

- name: Find the URL of the archive
  set_fact:
    watchman_url: "{{ (watchman_releases.json | map(attribute='assets') | flatten | \
      selectattr('browser_download_url','match','.*-linux.zip$'))[0].browser_download_url }}"

- name: Find the URL of the archive
  set_fact:
    watchman_version: "{{ watchman_url | regex_search('(\\d{4})\\.(\\d*\\.)*\\d*') }}"

- name: "Determine whether or not the latest version of {{ app_name }} is already installed"
  set_fact:
    install_watchman: "{{ (current_watchman_version.skipped | default(false)) or \
      ((not current_watchman_version.skipped | default(false)) and \
      (current_watchman_version.stdout != watchman_version)) }}"

- name: "Ensure {{ watchman_src_folder }} directory exists"
  file:
    path: "{{ watchman_src_folder }}"
    state: directory
    mode: 0700

- name: "Ensure older version of {{ app_name }} is uninstalled"
  file:
    path: /usr/local/bin/watchman
    state: absent
  when: install_watchman

- name: "Ensure latest version of {{ app_name }} is downloaded"
  unarchive:
    src: "{{ watchman_url }}"
    dest: "{{ watchman_src_folder }}"
    remote_src: true
  when: install_watchman

- name: "Ensure {{ app_name }} is installed"
  copy:
    src: "{{ watchman_src_folder + '/watchman-v' + watchman_version + '-linux/bin/watchman' }}"
    dest: /usr/local/bin/watchman
    mode: 0755
    remote_src: true
  when: install_watchman

- name: "Ensure {{ app_name }}'s libraries are installed"
  copy:
    src: "{{ watchman_src_folder + '/watchman-v' + watchman_version + '-linux/lib/' }}"
    dest: /usr/local/lib/
    mode: 0755
    remote_src: true
  when: install_watchman

- name: "Save meta information about the version of {{ app_name }} that was installed"
  copy:
    dest: ~/.config/megabytelabs/watchman
    mode: 0600
    content: |
      {{ watchman_version }}
  when: install_watchman

- name: Ensure system configuration is updated
  lineinfile:
    path: /etc/sysctl.conf
    regex: "{{ item.regex }}"
    line: "{{ item.value }}"
  loop:
    - regex: "^.*fs.inotify.max_user_instances.*"
      value: fs.inotify.max_user_instances=8192
    - regex: "^.*fs.inotify.max_user_watches.*"
      value: fs.inotify.max_user_watches=524288
    - regex: "^.*fs.inotify.max_queued_events.*"
      value: fs.inotify.max_queued_events=16384
