---
- name: "Ensure {{ app_name }}'s dependencies are installed"
  package:
    name:
      - zip
      - unzip
    state: "{{ app_state | default('present') }}"
  when: ansible_system == 'Linux'

- name: Ensure Megabyte Labs configuration directory exists
  file:
    mode: 0700
    path: '{{ item }}'
    state: directory
  loop:
    - ~/.config
    - ~/.config/megabytelabs

- name: 'Check if {{ app_name }} has configuration stored in ~/.config/megabytelabs/sdkman'
  stat:
    path: ~/.config/megabytelabs/sdkman
  register: sdkman_config

- name: 'Detect previously installed {{ app_name }} version'
  command: cat sdkman
  args:
    chdir: ~/.config/megabytelabs
  changed_when: false
  register: current_sdkman_version
  when: sdkman_config.stat.exists

- name: 'Detect the latest {{ app_name }} version'
  uri:
    url: https://api.github.com/repos/sdkman/sdkman-cli/releases/latest
    headers:
      Authorization: "token github_pat_{{ github_public_access_token | default('11ABLI5FQ001Q0rkjpBoN4_CZ8a4MkVduK4MZsmLZ12Key9Lpuwd0ONOsz5FjSQ9hPFDJY45NEpq9zAij8') }}"
  register: sdkman_latest_release_tag

- name: 'Determine whether or not the latest version of {{ app_name }} is already installed'
  set_fact:
    install_sdkman: "{{ (current_sdkman_version.skipped | default(false)) or \
      ((not current_sdkman_version.skipped | default(false)) and (current_sdkman_version.stdout != sdkman_latest_release_tag.json.tag_name)) }}"

- name: Run generic Linux tasks
  loop: '{{ user_configs }}'
  include_tasks: user-Linux.yml
  loop_control:
    label: '{{ user.username }}'
    loop_var: user
  when: (user.system is not defined) or ((user.system is defined) and (not user.system))

- name: 'Save meta information about the version of {{ app_name }} that was installed'
  copy:
    dest: ~/.config/megabytelabs/sdkman
    mode: 0600
    content: |
      {{ sdkman_latest_release_tag.json.tag_name }}
  when: install_sdkman
